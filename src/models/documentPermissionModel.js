import BaseModel from "./BaseModel.js";
import dbHelpers from "../helpers/dbHelpers.js";

class DocumentPermission extends BaseModel {
	constructor() {
		super("document_permissions"); // table
	}

	/**
	 * V√©rifie si un utilisateur est autoris√© √† voir un document
	 * @param {Number} documentId - ID du document
	 * @param {Number} userId - ID de l'utilisateur
	 * @returns {Boolean} - true si autoris√©, sinon false
	 */
	async isUserAuthorized(documentId, userId) {
		// V√©rifie que documentId et userId ne sont pas undefined
		console.log("üõ†Ô∏è V√©rification autorisation - Document ID:", documentId, "User ID:", userId);

		if (!documentId || !userId) {
			console.error("isUserAuthorized - documentId ou userId est undefined :", {
				documentId,
				userId
			});
			return false; // Refuser l'acc√®s si un param√®tre est invalide
		}

		const rows = await dbHelpers.dbSelect("document_permissions", {
			documentId,
			receiverId: userId
		});
		console.log("üîé R√©sultat de la requ√™te:", rows);
		return rows.length > 0;
	}

	/**
	 * Supprime un utilisateur des permissions associ√©es √† un document
	 * @param {Number} documentId - ID du document
	 * @param {Number} receiverId - ID du receveur
	 */
	async removePermission(documentId, receiverId) {
		return dbHelpers.dbDelete("document_permissions", { documentId, receiverId });
	}

	/**
	 * Met √† jour les permissions d'un document
	 * @param {Number} documentId - ID du document
	 * @param {Number} targetUserId - ID de l'utilisateur cible
	 */
	async update(documentId, removeUsers, addUsers) {
		try {
			// üî¥ Suppression des utilisateurs
			if (removeUsers && removeUsers.length > 0) {
				for (const receiverId of removeUsers) {
					await this.removePermission(documentId, receiverId);
				}
			}

			// üü¢ Ajout des nouveaux utilisateurs
			if (addUsers && addUsers.length > 0) {
				for (const receiverId of addUsers) {
					// V√©rifier si la permission existe d√©j√†
					const existing = await dbHelpers.dbSelect("document_permissions", {
						documentId,
						receiverId
					});
					if (existing.length === 0) {
						await this.create(documentId, receiverId);
					}
				}
			}
		} catch (error) {
			console.error("Error updating document permissions:", error);
			throw error;
		}
	}
}

export default new DocumentPermission();
